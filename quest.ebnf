program := {<ast-definition> | <expression>} ;
ast-definition := '$define-ast' {<ast-pattern>} ':=' {<ast-replacement>} ';' ;
ast-pattern
 := '[' <ast-pattern> ']'
  | '{' <ast-pattern> '}'
  | '(' <ast-pattern> ')' [<single-quote-literal>] ['+' | '*'] (* `+` indicates 1+ *)
  | '<' [<ast-binding> ':'] <ident> '>'
  | <single-quote-literal>
  ;
ast-binding := '$' <ident> ;
ast-replacement :=
   ;

$astdecl { do $body:block while $cond:expr } := {
   if $cond {
      $body(); // Gotta run the block of code.
      while $cond $body
   }
};

$astdecl { while $cond:expr $body:block } := {
   Kernel::while({ $cond }, $body)
};

$astdecl { $cond:expr ? $ift:expr : $iff:expr } := {
   if $cond { $ift } else { $iff }
};

$astdecl { if $cond:expr $ift:block $[else $iff:block] } := {
   Kernel::if($cond, $ift, $[$iff])
};

$astdecl { $(if $cond:expr $ift:block)else+ $[else $iff:block] } := {
   Kernel::switch(true, $($cond, $ift,)+ $[true, $iff])
};

$astdecl { object ( $($parent:expr),* ) $[$body:block] } := {
   ({
      __parents__ = [ $($parent ',')* ]; // todo: if no parent, `[Scope, Kernel]`.
      $[$body;]
      :0
   }())
};

$astdecl { opdecl $op:token ; } := {
   $$astdecl { $$lhs:primary $op $$rhs:expr } := {
      $$lhs.($op)($$rhs)
   };
};

opdecl + ;
opdecl - ;
opdecl * ;
opdecl <$> ;

single-quote-literal := ... ;

(*
expression := <block> | 
expr := <block> | <unary-op> | <binary-op> | <ecall>

unary-op := UNARY_OP <expr> ;
binary-op := <expr> BINARY_OP <expr> ;

fn-call := <primary> '(' <fn-call-args> ')' ;
attr-access := <primary> '.' <primary>;
array-access := <primarY> '[' <fn-call-args> ']' ;

literal := STRING_LITERAL | 

array-literal := '[' {<expression> ','} [<expression>] '}' ;
block := '{' {<expression> NEWLINE} [<expression>] '}' ;

number-literal := ['+' | '-'] (<integer-literal> | <float-literal>) ;
(* NOTE: {...}'_' is the same as )
integer-literal
 := '0' 'x' {'_'} HEX_DIGIT {'_' | HEX_DIGIT}
  | '0' 'b' {'_'} ('0' | '1') {'_' | '0' | '1'}
  | '0' 'o' {'_'} OCTAL_DIGIT {'_' | OCTAL_DIGIT}
  | ['0' 'd'] {'_'} DIGIT {'_' | DIGIT} ;
float-literal
 := DIGIT {'_' | DIGIT}
 	('.' {'_'} DIGIT {'_' DIGIT}
 		| ('e' | 'E') ['+' | '-'] {'_'} DIGIT {'_' DIGIT}) ;


string-literal := <string-single> | <string-double> | <string-raw> ;
string-single := "'" ( BACKSLASH <string-single-escape> | (? any non-"'" char ?) ) "'" ;
string-single-escape := "'" | '"' | BACKSLASH ;
string-double := '"' ( BACKSLASH <string-double-escape> | (? any non-'"' char ?) ) '"' ;
string-double-escape
 := <string-single-escape>
  | 'x' HEX_DIGIT HEX_DIGIT
  | 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
  | 'n' | 'r' | 't' | 'f' | '0' ;
string-raw := 'r' {'#'} '"' (? any character, but not greedily ?) '"' (? same amount of `#`s as the start ?) ;

BACKSLASH := '\\' ;
HEX_DIGIT
 := 'a' | 'b' | 'c' | 'd' | 'e' | 'f'
  | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'
  | DIGIT ;

OCTAL_DIGIT := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' ;
DIGIT := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;
NEWLINE := ';' | '\n' ;
*)


(*
program := {<ast-definition> | <expression>} ;
ast-definition := '$define-ast' {<ast-pattern>} ':=' {<ast-replacement>} ';' ;
ast-pattern
 := '[' <ast-pattern> ']'
  | '{' <ast-pattern> '}'
  | '(' <ast-pattern> ')' [<single-quote-literal>] ['+' | '*'] (* `+` indicates 1+ *)
  | '<' [<ast-binding> ':'] <ident> '>'
  | <single-quote-literal>
  ;
ast-binding := '$' <ident> ;
ast-replacement :=
   ;

$define-ast
      'do' <$body:block> 'while' <$cond:expr>
   := if $cond { $body; while $cond { $body } } ;

$define-ast
      'while' <$cond:expr> <$body:block>
   := Kernel::while({ $cond }, $body) ;

$define-ast
      'if' <$cond:expr> <$ift:block> ['else' <$iff:block>]
   := Kernel::if($cond, $ift, $[$iff]) ;

$define-ast
      ('if' <$cond:expr> <$ift:block>)'else'+
      ['else' <$iff:block>]
   := Kernel::switch(true, $($cond, $ift,)+ $[true, $iff]) ;

$define-ast
      'object' '(' (<$parent:expr>)','* ')' [<$body:block>]
   := ({
         __parents__ = [ $Scope, Kernel ];
         __parents__ = [ $($parent ',')* ]; // todo: if no parent, dont replace old one.
         $[$body;]
         :0
      }())

single-quote-literal := ... ;

(*
expression := <block> | 
expr := <block> | <unary-op> | <binary-op> | <ecall>

unary-op := UNARY_OP <expr> ;
binary-op := <expr> BINARY_OP <expr> ;

fn-call := <primary> '(' <fn-call-args> ')' ;
attr-access := <primary> '.' <primary>;
array-access := <primarY> '[' <fn-call-args> ']' ;

literal := STRING_LITERAL | 

array-literal := '[' {<expression> ','} [<expression>] '}' ;
block := '{' {<expression> NEWLINE} [<expression>] '}' ;

number-literal := ['+' | '-'] (<integer-literal> | <float-literal>) ;
(* NOTE: {...}'_' is the same as )
integer-literal
 := '0' 'x' {'_'} HEX_DIGIT {'_' | HEX_DIGIT}
  | '0' 'b' {'_'} ('0' | '1') {'_' | '0' | '1'}
  | '0' 'o' {'_'} OCTAL_DIGIT {'_' | OCTAL_DIGIT}
  | ['0' 'd'] {'_'} DIGIT {'_' | DIGIT} ;
float-literal
 := DIGIT {'_' | DIGIT}
   ('.' {'_'} DIGIT {'_' DIGIT}
      | ('e' | 'E') ['+' | '-'] {'_'} DIGIT {'_' DIGIT}) ;


string-literal := <string-single> | <string-double> | <string-raw> ;
string-single := "'" ( BACKSLASH <string-single-escape> | (? any non-"'" char ?) ) "'" ;
string-single-escape := "'" | '"' | BACKSLASH ;
string-double := '"' ( BACKSLASH <string-double-escape> | (? any non-'"' char ?) ) '"' ;
string-double-escape
 := <string-single-escape>
  | 'x' HEX_DIGIT HEX_DIGIT
  | 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
  | 'n' | 'r' | 't' | 'f' | '0' ;
string-raw := 'r' {'#'} '"' (? any character, but not greedily ?) '"' (? same amount of `#`s as the start ?) ;

BACKSLASH := '\\' ;
HEX_DIGIT
 := 'a' | 'b' | 'c' | 'd' | 'e' | 'f'
  | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'
  | DIGIT ;

OCTAL_DIGIT := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' ;
DIGIT := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;
NEWLINE := ';' | '\n' ;
*)
