program := {<ast-definition> | <expr>} ;
ast-definition := '$syntax' {<ast-pattern>} ':=' {<ast-replacement>} ';' ;
(*ast-pattern
 := '[' <ast-pattern> ']'
  | '{' <ast-pattern> '}'
  | '(' <ast-pattern> ')' [<single-quote-literal>] ['+' | '*'] (* `+` indicates 1+ *)
  | '<' [<ast-binding> ':'] <ident> '>'
  | <single-quote-literal>
  ;
ast-binding := '$' <ident> ;
ast-replacement :=
   ;*)

program := {expr} ;
expr := primary | assignment | expr BINARY_OP expr ;

assignment
 := ident '=' expr
  | primary ('.' | '::') atom '=' expr
  | primary '[' fn-args ']' '=' expr
  ;

fn-args := {['*'] expr ','} [['*'] expr] ;

primary
 := atom
  | block
  | '[' fn-args ']' (* array *)
  | UNARY_OP primary
  | primary '(' fn-args ')'
  | primary '[' fn-args ']'
  | primary ('.' | '::') atom
  ;

block := [block-args '->'] '{' {expr ';'} [expr] '}' ;
block-args := ident | '(' {ident ','} ident ')' ;
atom := integer | float | string | ident | stackframe-literal | '(' expr ')' ;
